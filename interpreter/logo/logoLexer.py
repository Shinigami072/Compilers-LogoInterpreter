# Generated from logo.g4 by ANTLR 4.7.1
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61")
        buf.write("\u0142\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3")
        buf.write("\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\b\3\b")
        buf.write("\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3$\3$\3%\3%\3&")
        buf.write("\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3+\3,\3,\7,\u0121")
        buf.write("\n,\f,\16,\u0124\13,\3-\6-\u0127\n-\r-\16-\u0128\3-\3")
        buf.write("-\6-\u012d\n-\r-\16-\u012e\5-\u0131\n-\3.\3.\7.\u0135")
        buf.write("\n.\f.\16.\u0138\13.\3/\5/\u013b\n/\3/\3/\3\60\3\60\3")
        buf.write("\60\3\60\2\2\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23")
        buf.write("\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25")
        buf.write(")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A")
        buf.write("\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61\3\2\b\4\2C\\c|\6")
        buf.write("\2\62;C\\aac|\3\2\62;\3\2\60\60\4\2\f\f\17\17\5\2\13\f")
        buf.write("\17\17\"\"\2\u0147\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2")
        buf.write("\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21")
        buf.write("\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
        buf.write("\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2")
        buf.write("\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2")
        buf.write("\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2")
        buf.write("\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2")
        buf.write("\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3")
        buf.write("\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q")
        buf.write("\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2")
        buf.write("[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\3a\3\2\2\2\5d\3\2\2\2")
        buf.write("\7h\3\2\2\2\tj\3\2\2\2\13l\3\2\2\2\rs\3\2\2\2\17u\3\2")
        buf.write("\2\2\21w\3\2\2\2\23z\3\2\2\2\25\177\3\2\2\2\27\u0085\3")
        buf.write("\2\2\2\31\u0088\3\2\2\2\33\u0090\3\2\2\2\35\u0093\3\2")
        buf.write("\2\2\37\u009c\3\2\2\2!\u009f\3\2\2\2#\u00a5\3\2\2\2%\u00a8")
        buf.write("\3\2\2\2\'\u00ad\3\2\2\2)\u00b0\3\2\2\2+\u00bc\3\2\2\2")
        buf.write("-\u00bf\3\2\2\2/\u00c5\3\2\2\2\61\u00c8\3\2\2\2\63\u00d0")
        buf.write("\3\2\2\2\65\u00d3\3\2\2\2\67\u00de\3\2\2\29\u00e1\3\2")
        buf.write("\2\2;\u00ec\3\2\2\2=\u00f1\3\2\2\2?\u00f6\3\2\2\2A\u00fc")
        buf.write("\3\2\2\2C\u0102\3\2\2\2E\u0109\3\2\2\2G\u010d\3\2\2\2")
        buf.write("I\u010f\3\2\2\2K\u0111\3\2\2\2M\u0113\3\2\2\2O\u0115\3")
        buf.write("\2\2\2Q\u0117\3\2\2\2S\u0119\3\2\2\2U\u011b\3\2\2\2W\u011e")
        buf.write("\3\2\2\2Y\u0126\3\2\2\2[\u0132\3\2\2\2]\u013a\3\2\2\2")
        buf.write("_\u013e\3\2\2\2ab\7v\2\2bc\7q\2\2c\4\3\2\2\2de\7g\2\2")
        buf.write("ef\7p\2\2fg\7f\2\2g\6\3\2\2\2hi\7<\2\2i\b\3\2\2\2jk\7")
        buf.write(".\2\2k\n\3\2\2\2lm\7t\2\2mn\7g\2\2no\7r\2\2op\7g\2\2p")
        buf.write("q\7c\2\2qr\7v\2\2r\f\3\2\2\2st\7]\2\2t\16\3\2\2\2uv\7")
        buf.write("_\2\2v\20\3\2\2\2wx\7k\2\2xy\7h\2\2y\22\3\2\2\2z{\7o\2")
        buf.write("\2{|\7c\2\2|}\7m\2\2}~\7g\2\2~\24\3\2\2\2\177\u0080\7")
        buf.write("r\2\2\u0080\u0081\7t\2\2\u0081\u0082\7k\2\2\u0082\u0083")
        buf.write("\7p\2\2\u0083\u0084\7v\2\2\u0084\26\3\2\2\2\u0085\u0086")
        buf.write("\7h\2\2\u0086\u0087\7f\2\2\u0087\30\3\2\2\2\u0088\u0089")
        buf.write("\7h\2\2\u0089\u008a\7q\2\2\u008a\u008b\7t\2\2\u008b\u008c")
        buf.write("\7y\2\2\u008c\u008d\7c\2\2\u008d\u008e\7t\2\2\u008e\u008f")
        buf.write("\7f\2\2\u008f\32\3\2\2\2\u0090\u0091\7d\2\2\u0091\u0092")
        buf.write("\7m\2\2\u0092\34\3\2\2\2\u0093\u0094\7d\2\2\u0094\u0095")
        buf.write("\7c\2\2\u0095\u0096\7e\2\2\u0096\u0097\7m\2\2\u0097\u0098")
        buf.write("\7y\2\2\u0098\u0099\7c\2\2\u0099\u009a\7t\2\2\u009a\u009b")
        buf.write("\7f\2\2\u009b\36\3\2\2\2\u009c\u009d\7t\2\2\u009d\u009e")
        buf.write("\7v\2\2\u009e \3\2\2\2\u009f\u00a0\7t\2\2\u00a0\u00a1")
        buf.write("\7k\2\2\u00a1\u00a2\7i\2\2\u00a2\u00a3\7j\2\2\u00a3\u00a4")
        buf.write("\7v\2\2\u00a4\"\3\2\2\2\u00a5\u00a6\7n\2\2\u00a6\u00a7")
        buf.write("\7v\2\2\u00a7$\3\2\2\2\u00a8\u00a9\7n\2\2\u00a9\u00aa")
        buf.write("\7g\2\2\u00aa\u00ab\7h\2\2\u00ab\u00ac\7v\2\2\u00ac&\3")
        buf.write("\2\2\2\u00ad\u00ae\7e\2\2\u00ae\u00af\7u\2\2\u00af(\3")
        buf.write("\2\2\2\u00b0\u00b1\7e\2\2\u00b1\u00b2\7n\2\2\u00b2\u00b3")
        buf.write("\7g\2\2\u00b3\u00b4\7c\2\2\u00b4\u00b5\7t\2\2\u00b5\u00b6")
        buf.write("\7u\2\2\u00b6\u00b7\7e\2\2\u00b7\u00b8\7t\2\2\u00b8\u00b9")
        buf.write("\7g\2\2\u00b9\u00ba\7g\2\2\u00ba\u00bb\7p\2\2\u00bb*\3")
        buf.write("\2\2\2\u00bc\u00bd\7r\2\2\u00bd\u00be\7w\2\2\u00be,\3")
        buf.write("\2\2\2\u00bf\u00c0\7r\2\2\u00c0\u00c1\7g\2\2\u00c1\u00c2")
        buf.write("\7p\2\2\u00c2\u00c3\7w\2\2\u00c3\u00c4\7r\2\2\u00c4.\3")
        buf.write("\2\2\2\u00c5\u00c6\7r\2\2\u00c6\u00c7\7f\2\2\u00c7\60")
        buf.write("\3\2\2\2\u00c8\u00c9\7r\2\2\u00c9\u00ca\7g\2\2\u00ca\u00cb")
        buf.write("\7p\2\2\u00cb\u00cc\7f\2\2\u00cc\u00cd\7q\2\2\u00cd\u00ce")
        buf.write("\7y\2\2\u00ce\u00cf\7p\2\2\u00cf\62\3\2\2\2\u00d0\u00d1")
        buf.write("\7j\2\2\u00d1\u00d2\7v\2\2\u00d2\64\3\2\2\2\u00d3\u00d4")
        buf.write("\7j\2\2\u00d4\u00d5\7k\2\2\u00d5\u00d6\7f\2\2\u00d6\u00d7")
        buf.write("\7g\2\2\u00d7\u00d8\7v\2\2\u00d8\u00d9\7w\2\2\u00d9\u00da")
        buf.write("\7t\2\2\u00da\u00db\7v\2\2\u00db\u00dc\7n\2\2\u00dc\u00dd")
        buf.write("\7g\2\2\u00dd\66\3\2\2\2\u00de\u00df\7u\2\2\u00df\u00e0")
        buf.write("\7v\2\2\u00e08\3\2\2\2\u00e1\u00e2\7u\2\2\u00e2\u00e3")
        buf.write("\7j\2\2\u00e3\u00e4\7q\2\2\u00e4\u00e5\7y\2\2\u00e5\u00e6")
        buf.write("\7v\2\2\u00e6\u00e7\7w\2\2\u00e7\u00e8\7t\2\2\u00e8\u00e9")
        buf.write("\7v\2\2\u00e9\u00ea\7n\2\2\u00ea\u00eb\7g\2\2\u00eb:\3")
        buf.write("\2\2\2\u00ec\u00ed\7j\2\2\u00ed\u00ee\7q\2\2\u00ee\u00ef")
        buf.write("\7o\2\2\u00ef\u00f0\7g\2\2\u00f0<\3\2\2\2\u00f1\u00f2")
        buf.write("\7u\2\2\u00f2\u00f3\7v\2\2\u00f3\u00f4\7q\2\2\u00f4\u00f5")
        buf.write("\7r\2\2\u00f5>\3\2\2\2\u00f6\u00f7\7n\2\2\u00f7\u00f8")
        buf.write("\7c\2\2\u00f8\u00f9\7d\2\2\u00f9\u00fa\7g\2\2\u00fa\u00fb")
        buf.write("\7n\2\2\u00fb@\3\2\2\2\u00fc\u00fd\7u\2\2\u00fd\u00fe")
        buf.write("\7g\2\2\u00fe\u00ff\7v\2\2\u00ff\u0100\7z\2\2\u0100\u0101")
        buf.write("\7{\2\2\u0101B\3\2\2\2\u0102\u0103\7t\2\2\u0103\u0104")
        buf.write("\7c\2\2\u0104\u0105\7p\2\2\u0105\u0106\7f\2\2\u0106\u0107")
        buf.write("\7q\2\2\u0107\u0108\7o\2\2\u0108D\3\2\2\2\u0109\u010a")
        buf.write("\7h\2\2\u010a\u010b\7q\2\2\u010b\u010c\7t\2\2\u010cF\3")
        buf.write("\2\2\2\u010d\u010e\7,\2\2\u010eH\3\2\2\2\u010f\u0110\7")
        buf.write("\61\2\2\u0110J\3\2\2\2\u0111\u0112\7-\2\2\u0112L\3\2\2")
        buf.write("\2\u0113\u0114\7/\2\2\u0114N\3\2\2\2\u0115\u0116\7>\2")
        buf.write("\2\u0116P\3\2\2\2\u0117\u0118\7@\2\2\u0118R\3\2\2\2\u0119")
        buf.write("\u011a\7?\2\2\u011aT\3\2\2\2\u011b\u011c\7$\2\2\u011c")
        buf.write("\u011d\5W,\2\u011dV\3\2\2\2\u011e\u0122\t\2\2\2\u011f")
        buf.write("\u0121\t\3\2\2\u0120\u011f\3\2\2\2\u0121\u0124\3\2\2\2")
        buf.write("\u0122\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123X\3\2\2")
        buf.write("\2\u0124\u0122\3\2\2\2\u0125\u0127\t\4\2\2\u0126\u0125")
        buf.write("\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0126\3\2\2\2\u0128")
        buf.write("\u0129\3\2\2\2\u0129\u0130\3\2\2\2\u012a\u012c\t\5\2\2")
        buf.write("\u012b\u012d\t\4\2\2\u012c\u012b\3\2\2\2\u012d\u012e\3")
        buf.write("\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0131")
        buf.write("\3\2\2\2\u0130\u012a\3\2\2\2\u0130\u0131\3\2\2\2\u0131")
        buf.write("Z\3\2\2\2\u0132\u0136\7=\2\2\u0133\u0135\n\6\2\2\u0134")
        buf.write("\u0133\3\2\2\2\u0135\u0138\3\2\2\2\u0136\u0134\3\2\2\2")
        buf.write("\u0136\u0137\3\2\2\2\u0137\\\3\2\2\2\u0138\u0136\3\2\2")
        buf.write("\2\u0139\u013b\7\17\2\2\u013a\u0139\3\2\2\2\u013a\u013b")
        buf.write("\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013d\7\f\2\2\u013d")
        buf.write("^\3\2\2\2\u013e\u013f\t\7\2\2\u013f\u0140\3\2\2\2\u0140")
        buf.write("\u0141\b\60\2\2\u0141`\3\2\2\2\t\2\u0122\u0128\u012e\u0130")
        buf.write("\u0136\u013a\3\b\2\2")
        return buf.getvalue()


class logoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    MUL = 35
    DIV = 36
    ADD = 37
    SUB = 38
    LESS_ = 39
    MORE_ = 40
    EQUAL_ = 41
    STRINGLITERAL = 42
    STRING = 43
    NUMBER = 44
    COMMENT = 45
    EOL = 46
    WS = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'to'", "'end'", "':'", "','", "'repeat'", "'['", "']'", "'if'", 
            "'make'", "'print'", "'fd'", "'forward'", "'bk'", "'backward'", 
            "'rt'", "'right'", "'lt'", "'left'", "'cs'", "'clearscreen'", 
            "'pu'", "'penup'", "'pd'", "'pendown'", "'ht'", "'hideturtle'", 
            "'st'", "'showturtle'", "'home'", "'stop'", "'label'", "'setxy'", 
            "'random'", "'for'", "'*'", "'/'", "'+'", "'-'", "'<'", "'>'", 
            "'='" ]

    symbolicNames = [ "<INVALID>",
            "MUL", "DIV", "ADD", "SUB", "LESS_", "MORE_", "EQUAL_", "STRINGLITERAL", 
            "STRING", "NUMBER", "COMMENT", "EOL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "MUL", "DIV", "ADD", "SUB", "LESS_", 
                  "MORE_", "EQUAL_", "STRINGLITERAL", "STRING", "NUMBER", 
                  "COMMENT", "EOL", "WS" ]

    grammarFileName = "logo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


